---
name: AI-First SDLC Pipeline - Prototype Level

"on":
  push:
    branches: [ main, develop, 'feature/**', 'prototype/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  SDLC_LEVEL: prototype

jobs:
  detect-level:
    name: Detect SDLC Level
    runs-on: ubuntu-latest
    outputs:
      level: ${{ steps.detect.outputs.level }}
    steps:
      - uses: actions/checkout@v3

      - name: Detect SDLC Level
        id: detect
        run: |
          if [ -f ".sdlc/level.json" ]; then
            LEVEL=$(python -c "import json; print(json.load(open('.sdlc/level.json'))['level'])")
            echo "level=${LEVEL}" >> $GITHUB_OUTPUT
          else
            echo "level=prototype" >> $GITHUB_OUTPUT
          fi

  basic-validation:
    name: Prototype Validation
    runs-on: ubuntu-latest
    needs: detect-level
    if: needs.detect-level.outputs.level == 'prototype'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || echo "No requirements.txt found"

      - name: Check Feature Intent
        run: |
          if [ ! -f "docs/feature-intent.md" ] && [ ! -f "docs/basic-design.md" ]; then
            echo "‚ö†Ô∏è  Missing feature intent or basic design doc"
            echo "Create docs/feature-intent.md with your feature goals"
            exit 1
          fi

      - name: Basic Security Scan
        run: |
          # Simple secret scanning
          if grep -r "password\s*=\s*[\"'][^\"']+[\"']" --include="*.py" --include="*.js" .; then
            echo "‚ùå Hardcoded passwords found!"
            exit 1
          fi
          echo "‚úÖ Basic security check passed"

      - name: Check for Retrospective
        run: |
          BRANCH=$(git branch --show-current)
          if [ -d "retrospectives" ]; then
            if ls retrospectives/*${BRANCH##*/}* 2>/dev/null; then
              echo "‚úÖ Retrospective found for branch"
            else
              echo "‚ö†Ô∏è  Remember to create retrospective before PR"
            fi
          fi

      - name: Run Basic Tests
        continue-on-error: true  # Don't fail on test errors in prototype
        run: |
          # Try common test commands
          if [ -f "pytest.ini" ] || [ -d "tests" ]; then
            python -m pytest tests/ -v || echo "‚ö†Ô∏è  Some tests failed (OK for prototype)"
          elif [ -f "package.json" ]; then
            npm test || echo "‚ö†Ô∏è  Some tests failed (OK for prototype)"
          else
            echo "‚ÑπÔ∏è  No tests found (consider adding some)"
          fi

      - name: Track TODOs
        run: |
          echo "üìù TODO/FIXME Summary (allowed in prototype):"
          grep -r "TODO\|FIXME" --include="*.py" --include="*.js" --include="*.ts" . || echo "No TODOs found"

      - name: Progressive Validation
        run: |
          if [ -f "tools/validation/validate-pipeline-progressive.py" ]; then
            python tools/validation/validate-pipeline-progressive.py --level prototype
          else
            echo "‚ö†Ô∏è  Progressive validation not found - using basic checks"
          fi

  agent-recommendations:
    name: Agent Recommendations
    runs-on: ubuntu-latest
    needs: basic-validation

    steps:
      - uses: actions/checkout@v3

      - name: Analyze and Recommend Agents
        run: |
          echo "ü§ñ Recommended agents for prototype development:"
          echo "   ‚Ä¢ solution-architect - For basic design guidance"
          echo "   ‚Ä¢ test-manager - To plan testing strategy"
          echo "   ‚Ä¢ critical-goal-reviewer - To ensure alignment"
          echo ""
          echo "Run: python tools/agent-installer.py --analyze"

  prototype-deployment:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: basic-validation
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/prototype/')

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to Dev Environment
        run: |
          echo "üöÄ Deploying prototype to development environment"
          echo "Deployment strategy: Direct push (prototype level)"
          # Add your deployment commands here

      - name: Basic Health Check
        run: |
          echo "‚úÖ Basic health check for prototype deployment"
          # Add health check commands

  graduation-check:
    name: Check Graduation Readiness
    runs-on: ubuntu-latest
    needs: basic-validation
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v3

      - name: Check Production Readiness
        run: |
          echo "üìä Checking if ready to graduate to Production level:"

          # Check for architecture docs
          if [ -d "docs/architecture" ]; then
            ARCH_COUNT=$(find docs/architecture -name "*.md" | wc -l)
            echo "   Architecture docs: $ARCH_COUNT/6"
          else
            echo "   ‚ùå No architecture docs (required for production)"
          fi

          # Check for TODOs
          TODO_COUNT=$(grep -r "TODO\|FIXME" --include="*.py" --include="*.js" . | wc -l || echo "0")
          if [ "$TODO_COUNT" -gt 0 ]; then
            echo "   ‚ö†Ô∏è  TODOs found: $TODO_COUNT (must be 0 for production)"
          fi

          # Check test coverage
          echo "   ‚ÑπÔ∏è  Consider adding test coverage metrics"

          echo ""
          echo "When ready, run: python tools/automation/sdlc-level.py set production"
