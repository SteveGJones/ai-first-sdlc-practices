name: Billy Wright Coaching System
description: Coaches fresh AIs to legendary collaborative status

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
  issue_comment:
    types: [created]
  issues:
    types: [opened, edited]

jobs:
  welcome-fresh-ai:
    if: github.event_name == 'issues' && contains(github.event.issue.title, 'Billy Wright Journey')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Analyze Dream and Skills
        id: analyze
        run: |
          python .github/coaching/analyze_fresh_ai.py \
            --issue-body "${{ github.event.issue.body }}" \
            --output formation
      
      - name: Provide Formation Recommendation
        uses: actions/github-script@v7
        with:
          script: |
            const formation = '${{ steps.analyze.outputs.formation }}';
            const specialists = '${{ steps.analyze.outputs.specialists }}';
            
            const response = `
            ## üéØ Your Recommended Formation: ${formation}
            
            Based on your dream, you'll need these teammates:
            
            **Foundation Trio** (Start Here):
            ${specialists}
            
            **Your First Exercise**: Create a PR titled "My First Team Play"
            - Write a simple README describing your project
            - Show how each specialist contributes
            - Tag this issue when done
            
            Remember: Billy Wright never ran alone. Neither should you.
            
            üìö [Read the Billy Wright Philosophy](docs/BILLY-WRIGHT-COACHING-SYSTEM.md)
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: response
            });

  coach-collaboration:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Check Solo Runs
        id: solo_check
        run: |
          python .github/coaching/check_solo_runs.py \
            --pr-number ${{ github.event.pull_request.number }} \
            --repo ${{ github.repository }}
      
      - name: Analyze Team Collaboration
        id: collaboration
        run: |
          python .github/coaching/analyze_collaboration.py \
            --pr-number ${{ github.event.pull_request.number }} \
            --repo ${{ github.repository }}
      
      - name: Calculate Chemistry Score
        id: chemistry
        run: |
          python .github/coaching/calculate_chemistry.py \
            --pr-data "${{ steps.collaboration.outputs.data }}"
      
      - name: Provide Coaching Feedback
        uses: actions/github-script@v7
        with:
          script: |
            const soloRuns = ${{ steps.solo_check.outputs.found }};
            const chemistryScore = ${{ steps.chemistry.outputs.score }};
            const missingConsultations = JSON.parse('${{ steps.collaboration.outputs.missing }}');
            
            let message = '';
            
            if (soloRuns > 0) {
              message = `
              ‚öΩ **Billy Wright Coaching Moment**
              
              I detected ${soloRuns} solo decision(s) in this PR.
              
              Remember: Billy Wright would have consulted teammates!
              
              **Missing Consultations**:
              ${missingConsultations.map(m => `- ${m.specialist}: ${m.area}`).join('\n')}
              
              **Try This**: 
              \`\`\`
              @solution-architect - what's your view on this approach?
              @ai-test-engineer - how should we test this?
              @devops-specialist - any deployment concerns?
              \`\`\`
              
              Your current chemistry score: ${chemistryScore}%
              `;
            } else if (chemistryScore >= 85) {
              message = `
              üèÜ **Legendary Team Play!**
              
              Billy Wright would be proud of this collaboration!
              
              - Chemistry Score: ${chemistryScore}%
              - Solo Runs: 0
              - Team Consultations: Complete
              
              You're showing legendary collaborative habits! Keep this up!
              `;
            } else {
              message = `
              ‚úÖ **Good Team Coordination**
              
              No solo runs detected! Your chemistry is building nicely.
              
              - Chemistry Score: ${chemistryScore}%
              - Next Goal: 85% for legendary status
              
              **Tips to improve chemistry**:
              - Add more detailed handoff comments
              - Show how each decision supports teammates
              - Celebrate team member contributions
              `;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });

  track-progress:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Update Progress Metrics
        id: progress
        run: |
          python .github/coaching/update_progress.py \
            --pr-number ${{ github.event.pull_request.number }} \
            --user ${{ github.event.pull_request.user.login }}
      
      - name: Check for Level Up
        id: levelup
        run: |
          python .github/coaching/check_level_up.py \
            --user ${{ github.event.pull_request.user.login }} \
            --current-level "${{ steps.progress.outputs.level }}" \
            --chemistry "${{ steps.progress.outputs.chemistry }}"
      
      - name: Create Level Up Issue
        if: steps.levelup.outputs.ready == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const nextLevel = '${{ steps.levelup.outputs.next_level }}';
            const achievement = '${{ steps.levelup.outputs.achievement }}';
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üéØ Level Up: ${achievement}`,
              body: `
              ## Congratulations! You've reached a new level!
              
              ${achievement}
              
              **Your Progress**:
              - Current Formation: ${{ steps.progress.outputs.formation }}
              - Chemistry Score: ${{ steps.progress.outputs.chemistry }}%
              - PRs Completed: ${{ steps.progress.outputs.pr_count }}
              - Solo Runs Prevented: ${{ steps.progress.outputs.solo_prevented }}
              
              **Your Next Challenge**: ${nextLevel}
              
              Ready to continue your journey to legendary status?
              `,
              labels: ['coaching', 'level-up', 'billy-wright']
            });

  crisis-simulation:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '/crisis-simulation')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Check Readiness
        id: ready
        run: |
          python .github/coaching/check_crisis_ready.py \
            --user ${{ github.event.comment.user.login }}
      
      - name: Create Crisis Scenario
        if: steps.ready.outputs.ready == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const scenario = await exec.exec('python', ['.github/coaching/generate_crisis.py']);
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® CRISIS SIMULATION - ${new Date().toISOString()}`,
              body: scenario,
              labels: ['crisis-simulation', 'coaching', 'billy-wright'],
              assignees: [context.payload.comment.user.login]
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Crisis simulation started! Check your new issue. You have 30 minutes. Good luck! ‚öΩ`
            });

  legendary-status-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Calculate Legendary Metrics
        id: legendary
        run: |
          python .github/coaching/check_legendary_status.py \
            --user ${{ github.event.pull_request.user.login }}
      
      - name: Award Legendary Status
        if: steps.legendary.outputs.achieved == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Create Hall of Fame entry
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üèÜ LEGENDARY STATUS ACHIEVED - ${{ github.event.pull_request.user.login }}`,
              body: `
              # üåü Welcome to the Hall of Fame! üåü
              
              @${{ github.event.pull_request.user.login }} has achieved LEGENDARY STATUS!
              
              ## Your Legendary Statistics:
              - Chemistry Score: ${{ steps.legendary.outputs.chemistry }}%
              - Formation Mastery: ${{ steps.legendary.outputs.formations_mastered }}
              - Crisis Response: ${{ steps.legendary.outputs.crisis_score }}%
              - Solo Runs Prevented: ${{ steps.legendary.outputs.solo_prevented }}
              - Team First Rate: ${{ steps.legendary.outputs.team_first }}%
              
              ## Your Legendary Badges:
              ![Billy Wright Legend](https://img.shields.io/badge/Billy%20Wright-LEGEND-gold)
              ![Chemistry Master](https://img.shields.io/badge/Chemistry-${{ steps.legendary.outputs.chemistry }}%25-green)
              ![Team First](https://img.shields.io/badge/Team%20First-Always-blue)
              
              You've mastered the Billy Wright way. Now, help others achieve greatness!
              `,
              labels: ['hall-of-fame', 'legendary', 'billy-wright']
            });
            
            // Update README with Hall of Fame entry
            const { data: readme } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'HALL-OF-FAME.md'
            });
            
            const content = Buffer.from(readme.content, 'base64').toString();
            const newEntry = `\n- **${{ github.event.pull_request.user.login }}** - Achieved: ${new Date().toLocaleDateString()} - Chemistry: ${{ steps.legendary.outputs.chemistry }}%`;
            
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'HALL-OF-FAME.md',
              message: 'üèÜ Add new legend to Hall of Fame',
              content: Buffer.from(content + newEntry).toString('base64'),
              sha: readme.sha
            });