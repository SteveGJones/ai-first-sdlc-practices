name: Test CI/CD Examples

on:
  push:
    branches: [ main, develop, 'feature/**' ]
    paths:
      - 'examples/ci-cd/**'
      - '.github/workflows/test-ci-examples.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'examples/ci-cd/**'
  workflow_dispatch:

jobs:
  validate-yaml-syntax:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install YAML validator
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml yamllint

    - name: Show yamllint config
      run: |
        yamllint --version
        echo "=== Checking for yamllint config ==="
        if [ -f .yamllint.yml ]; then
          echo "Found .yamllint.yml"
          cat .yamllint.yml
        else
          echo "No .yamllint.yml found - using defaults"
        fi

    - name: Validate GitHub Actions workflow
      run: |
        echo "=== Validating GitHub Actions workflow ==="
        if [ -f .yamllint.yml ]; then
          yamllint -c .yamllint.yml examples/ci-cd/.github/workflows/ai-sdlc.yml
        else
          yamllint -d relaxed examples/ci-cd/.github/workflows/ai-sdlc.yml || true
        fi

    - name: Validate GitLab CI configuration
      run: |
        echo "=== Validating GitLab CI configuration ==="
        if [ -f .yamllint.yml ]; then
          yamllint -c .yamllint.yml examples/ci-cd/gitlab/.gitlab-ci.yml
        else
          yamllint -d relaxed examples/ci-cd/gitlab/.gitlab-ci.yml || true
        fi
        # Also validate with Python to check structure
        python -c "import yaml; f = open('examples/ci-cd/gitlab/.gitlab-ci.yml', 'r'); config = yaml.safe_load(f); f.close(); assert 'stages' in config, 'Missing stages in GitLab CI'; assert 'validate:ai-sdlc' in config, 'Missing main validation job'; print('✅ GitLab CI configuration is valid')"

    - name: Validate Azure Pipelines configuration
      run: |
        echo "=== Validating Azure Pipelines configuration ==="
        if [ -f .yamllint.yml ]; then
          yamllint -c .yamllint.yml examples/ci-cd/azure-devops/azure-pipelines.yml
        else
          yamllint -d relaxed examples/ci-cd/azure-devops/azure-pipelines.yml || true
        fi
        python -c "import yaml; f = open('examples/ci-cd/azure-devops/azure-pipelines.yml', 'r'); config = yaml.safe_load(f); f.close(); assert 'trigger' in config, 'Missing trigger in Azure Pipelines'; assert 'stages' in config, 'Missing stages in Azure Pipelines'; print('✅ Azure Pipelines configuration is valid')"

    - name: Validate CircleCI configuration
      run: |
        echo "=== Validating CircleCI configuration ==="
        if [ -f .yamllint.yml ]; then
          yamllint -c .yamllint.yml examples/ci-cd/circleci/.circleci/config.yml
        else
          yamllint -d relaxed examples/ci-cd/circleci/.circleci/config.yml || true
        fi
        python -c "import yaml; f = open('examples/ci-cd/circleci/.circleci/config.yml', 'r'); config = yaml.safe_load(f); f.close(); assert config.get('version') == 2.1, 'CircleCI config should use version 2.1'; assert 'workflows' in config, 'Missing workflows in CircleCI'; assert 'jobs' in config, 'Missing jobs in CircleCI'; print('✅ CircleCI configuration is valid')"

    - name: Validate Jenkins Pipeline
      run: |
        echo "=== Checking Jenkins Pipeline syntax ==="
        # Basic syntax check - full validation would require Jenkins
        grep -q "pipeline {" examples/ci-cd/jenkins/Jenkinsfile
        grep -q "stages {" examples/ci-cd/jenkins/Jenkinsfile
        grep -q "steps {" examples/ci-cd/jenkins/Jenkinsfile
        echo "✅ Jenkins Pipeline has basic required structure"

    - name: Check for common issues
      run: |
        echo "=== Checking for common CI/CD configuration issues ==="

        # Check for hardcoded secrets
        if grep -r "password\|secret\|key\|token" examples/ci-cd/ | grep -v "GITHUB_TOKEN\|GITLAB_TOKEN\|API_KEY"; then
          echo "⚠️  Warning: Possible hardcoded secrets found"
        fi

        # Check for consistent Python versions
        PYTHON_VERSIONS=$(grep -r "python.*3\." examples/ci-cd/ | grep -oE "3\.[0-9]+" | sort -u)
        echo "Python versions used: $PYTHON_VERSIONS"

        # Check that all configs reference the validation tools
        for file in examples/ci-cd/**/*.yml examples/ci-cd/**/*.yaml examples/ci-cd/**/Jenkinsfile; do
          if [[ -f "$file" ]]; then
            if ! grep -q "validate-pipeline.py" "$file"; then
              echo "⚠️  Warning: $file doesn't reference validate-pipeline.py"
            fi
          fi
        done

  test-ci-tool-detection:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Test CI platform detection
      run: |
        # Create a simple test to verify CI detection would work
        cat > test_ci_detection.py << 'EOF'
        import os

        # Test environment variables that would be set in each CI
        ci_environments = {
            'GitHub Actions': {'GITHUB_ACTIONS': 'true', 'GITHUB_WORKFLOW': 'test'},
            'GitLab CI': {'GITLAB_CI': 'true', 'CI_PIPELINE_ID': '123'},
            'Jenkins': {'JENKINS_URL': 'http://jenkins', 'BUILD_ID': '1'},
            'Azure DevOps': {'TF_BUILD': 'True', 'SYSTEM_TEAMFOUNDATIONCOLLECTIONURI': 'https://dev.azure.com/org'},
            'CircleCI': {'CIRCLECI': 'true', 'CIRCLE_BUILD_NUM': '1'}
        }

        for ci_name, env_vars in ci_environments.items():
            # Temporarily set environment variables
            original_env = {}
            for key, value in env_vars.items():
                original_env[key] = os.environ.get(key)
                os.environ[key] = value

            # Test detection logic
            detected = False
            if ci_name == 'GitHub Actions' and os.getenv('GITHUB_ACTIONS') == 'true':
                detected = True
            elif ci_name == 'GitLab CI' and os.getenv('GITLAB_CI') == 'true':
                detected = True
            elif ci_name == 'Jenkins' and os.getenv('JENKINS_URL'):
                detected = True
            elif ci_name == 'Azure DevOps' and os.getenv('TF_BUILD') == 'True':
                detected = True
            elif ci_name == 'CircleCI' and os.getenv('CIRCLECI') == 'true':
                detected = True

            print(f"{'✅' if detected else '❌'} {ci_name} detection: {'PASS' if detected else 'FAIL'}")

            # Restore original environment
            for key in env_vars:
                if original_env[key] is None:
                    os.environ.pop(key, None)
                else:
                    os.environ[key] = original_env[key]
        EOF

        python test_ci_detection.py
