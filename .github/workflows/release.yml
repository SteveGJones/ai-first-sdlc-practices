name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for changelog

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Validate version tag
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV

        # Check setup.py version matches tag
        SETUP_VERSION=$(python -c "import re; print(re.search(r'version=[\"\\']([^\"\\']*)[\"\\'']', open('setup.py').read()).group(1))")

        if [ "$VERSION" != "$SETUP_VERSION" ]; then
          echo "❌ Tag version ($VERSION) doesn't match setup.py version ($SETUP_VERSION)"
          exit 1
        fi
        echo "✅ Version validation passed: $VERSION"

    - name: Run full validation
      run: |
        pip install -r requirements.txt
        python tools/validation/validate-pipeline.py --ci

    - name: Build distribution packages
      run: |
        python -m build
        ls -la dist/

    - name: Generate changelog
      run: |
        echo "# Release ${{ env.VERSION }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Changes" >> RELEASE_NOTES.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> RELEASE_NOTES.md

        echo "" >> RELEASE_NOTES.md
        echo "## Installation" >> RELEASE_NOTES.md
        echo '```bash' >> RELEASE_NOTES.md
        echo "pip install ai-first-sdlc==${{ env.VERSION }}" >> RELEASE_NOTES.md
        echo '```' >> RELEASE_NOTES.md

        cat RELEASE_NOTES.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: RELEASE_NOTES.md
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: ${{ contains(env.VERSION, 'rc') || contains(env.VERSION, 'beta') || contains(env.VERSION, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to PyPI
      if: ${{ !contains(env.VERSION, 'rc') && !contains(env.VERSION, 'beta') && !contains(env.VERSION, 'alpha') }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        if [ -n "$TWINE_PASSWORD" ]; then
          twine upload dist/*
        else
          echo "⚠️  PyPI token not configured, skipping PyPI upload"
        fi