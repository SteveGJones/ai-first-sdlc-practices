name: AI-First SDLC Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pre-commit

    - name: Run validation pipeline
      run: |
        # The validation tools are in this repo
        python tools/validation/validate-pipeline.py --ci
      continue-on-error: true  # Continue even if validation fails to see all results

    - name: Check feature proposal (PRs only)
      if: github.event_name == 'pull_request'
      run: |
        # Extract branch name from PR
        BRANCH_NAME="${{ github.head_ref }}"
        echo "Checking feature proposal for branch: $BRANCH_NAME"
        python tools/validation/check-feature-proposal.py --branch "$BRANCH_NAME"

    - name: Run specific validations
      run: |
        # Run individual checks to pinpoint issues
        echo "=== Branch Compliance ==="
        python tools/validation/validate-pipeline.py --check branch --ci || true

        echo "=== Security Scan ==="
        python tools/validation/validate-pipeline.py --check security --ci || true

        echo "=== Test Check ==="
        python tools/validation/validate-pipeline.py --check tests --ci || true

    - name: Generate validation report
      if: always()
      run: |
        python tools/validation/validate-pipeline.py --ci --format json > validation-report.json || true
        python tools/validation/validate-pipeline.py --ci --format markdown > validation-report.md || true

    - name: Upload validation reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: validation-reports
        path: |
          validation-report.json
          validation-report.md
        retention-days: 30

    - name: Comment PR with validation results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');

          // Read the markdown report if it exists
          let comment = '## AI-First SDLC Validation Results\n\n';
          try {
            const report = fs.readFileSync('validation-report.md', 'utf8');
            comment += report;
          } catch (e) {
            comment += '❌ Failed to generate validation report';
          }

          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('AI-First SDLC Validation Results')
          );

          // Update or create comment
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

  code-quality:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit

    - name: Run pre-commit hooks
      run: pre-commit run --all-files
      continue-on-error: true

  # Example of framework self-testing
  test-framework-tools:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test framework tools
      run: |
        # Test that tools can be imported and have help
        python tools/automation/progress-tracker.py --help
        python tools/automation/context-manager.py --help
        python tools/validation/validate-pipeline.py --help
        python tools/validation/check-feature-proposal.py --help