# Pre-commit hooks for Zero Technical Debt Policy
# Install: pip install pre-commit && pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # Architecture validation - MUST pass before any commit
  - repo: local
    hooks:
      - id: validate-architecture
        name: Validate Architecture Documents
        entry: python tools/validation/validate-architecture.py
        language: system
        pass_filenames: false
        always_run: true
        stages: [commit]
        description: "Ensures all 6 architecture documents are complete"

  # Technical debt detection - Zero tolerance
  - repo: local
    hooks:
      - id: check-technical-debt
        name: Check for Technical Debt
        entry: python tools/validation/check-technical-debt.py --threshold 0
        language: system
        pass_filenames: false
        always_run: true
        stages: [commit]
        description: "Detects TODOs, commented code, any types, and other debt"

  # Python-specific hooks
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3

  - repo: https://github.com/PyCQA/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: ['--max-line-length=88', '--extend-ignore=E203']

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        args: ['--strict', '--no-implicit-optional']
        additional_dependencies: [types-all]

  # JavaScript/TypeScript hooks
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.56.0
    hooks:
      - id: eslint
        files: \.(js|jsx|ts|tsx)$
        args: ['--fix']
        additional_dependencies:
          - eslint@8.56.0
          - eslint-config-standard
          - '@typescript-eslint/parser'
          - '@typescript-eslint/eslint-plugin'

  # Security checks
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']

  # YAML/JSON validation
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: debug-statements

  # Markdown formatting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        args: ['--fix']

  # Shell script validation
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker

  # Commit message formatting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Custom validation checks
  - repo: local
    hooks:
      - id: no-direct-push-to-main
        name: Prevent direct push to main
        entry: bash -c 'if [[ "$(git symbolic-ref --short HEAD)" == "main" ]]; then echo "Direct push to main branch is forbidden!"; exit 1; fi'
        language: system
        pass_filenames: false
        always_run: true

      - id: validate-feature-proposal
        name: Validate Feature Proposal
        entry: python tools/validation/check-feature-proposal.py
        language: system
        files: 'docs/feature-proposals/.*\.md$'

      - id: check-retrospective
        name: Check for Retrospective
        entry: |
          bash -c 'branch=$(git symbolic-ref --short HEAD);
          if [[ "$branch" != "main" ]] && ! ls retrospectives/*${branch#*/}* 2>/dev/null; then
            echo "Warning: No retrospective found for branch $branch";
          fi'
        language: system
        pass_filenames: false
        always_run: true

# Configuration for specific hooks
default_language_version:
  python: python3

ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: false
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [mypy, eslint, validate-architecture, check-technical-debt]
  submodules: false
