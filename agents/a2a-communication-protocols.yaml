# Agent-to-Agent Communication Protocols
# Billy Wright Tactical Formation Implementation
# Based on the A2A Tactical Team Discussion

version: "1.0"
formation_name: "Billy Wright 4-3-3"

# Core Communication Channels
communication_channels:
  
  architecture_discussion:
    participants: 
      - solution-architect
      - ai-solution-architect  
      - security-architect
    cadence: "Before any major implementation"
    message_format: "ARCH_REVIEW: [COMPONENT] | Design: [BRIEF] | Concerns: [RISKS]"
    escalation_path: [critical-goal-reviewer]
    
  quality_validation:
    participants:
      - test-manager
      - critical-goal-reviewer
      - ai-test-engineer
      - integration-orchestrator
    cadence: "After every deliverable"
    message_format: "QUALITY_CHECK: [DELIVERABLE] | Status: [PASS/FAIL] | Issues: [LIST]"
    escalation_path: [sdlc-enforcer, solution-architect]
    
  delivery_coordination:
    participants:
      - delivery-manager
      - agile-coach 
      - project-plan-tracker
    cadence: "Daily standup pattern"
    message_format: "DELIVERY_STATUS: [MILESTONE] | Progress: [%] | Blockers: [LIST]"
    escalation_path: [critical-goal-reviewer]
    
  performance_optimization:
    participants:
      - performance-engineer
      - sre-specialist
      - devops-specialist
    cadence: "Continuous monitoring"
    message_format: "PERF_ALERT: [METRIC] | Current: [VALUE] | Threshold: [LIMIT]"
    escalation_path: [solution-architect, delivery-manager]

  compliance_enforcement:
    participants:
      - sdlc-enforcer
      - compliance-auditor
      - framework-validator
    cadence: "Continuous"
    message_format: "COMPLIANCE: [CHECK] | Status: [PASS/FAIL] | Action: [REQUIRED]"
    escalation_path: [delivery-manager]

# Agent Roles and Capabilities
agents:
  
  # GOALKEEPERS - Last Line of Defense
  critical-goal-reviewer:
    role: "goalkeeper"
    position: "quality-validator"
    primary_function: "Validates solutions against original objectives"
    communication_style: "Thorough, methodical, objective"
    
    receives_from:
      - all  # Can receive validation requests from any agent
    
    passes_to:
      success: [delivery-manager, agile-coach]
      rework_needed: [solution-architect, ai-solution-architect]
      escalation: [sdlc-enforcer]
    
    message_templates:
      validation_complete: "‚úÖ VALIDATION_COMPLETE: [SOLUTION] meets objectives | Quality Score: [0-10] | Ready for: [NEXT_PHASE]"
      validation_failed: "‚ùå VALIDATION_FAILED: [SOLUTION] gaps identified | Missing: [REQUIREMENTS] | Recommend: [ACTIONS]"
      
    decision_criteria:
      - "Solution addresses original requirements"
      - "Quality standards met"
      - "No critical gaps identified"
      - "Acceptance criteria fulfilled"

  sdlc-enforcer:
    role: "goalkeeper" 
    position: "compliance-referee"
    primary_function: "Ensures all agents follow AI-First SDLC practices"
    communication_style: "Authoritative, clear, process-focused"
    
    receives_from:
      - all  # Monitors all agent activities
      
    passes_to:
      compliance_ok: [framework-validator]
      violations: [compliance-auditor, delivery-manager]
      guidance: [agile-coach, documentation-architect]
      
    message_templates:
      compliance_check: "üîç COMPLIANCE_CHECK: [ACTIVITY] | Status: [COMPLIANT/VIOLATION] | Framework: [SECTION]"
      violation_alert: "üö® VIOLATION: [AGENT] performed [ACTION] | Required: [PROCESS] | Impact: [SEVERITY]"
      guidance: "üìã GUIDANCE: [SITUATION] | Required Process: [STEPS] | References: [DOCS]"
      
    enforcement_rules:
      - "No direct main branch commits"
      - "Feature proposals required before implementation" 
      - "All changes must pass validation pipeline"
      - "Retrospectives mandatory before PR"

  # DEFENDERS - Foundation Builders
  compliance-auditor:
    role: "defender"
    position: "compliance-specialist"
    primary_function: "Audits all processes for regulatory compliance"
    communication_style: "Detailed, evidence-based, formal"
    
    receives_from: [sdlc-enforcer, security-architect, framework-validator]
    passes_to:
      audit_complete: [documentation-architect, delivery-manager]
      issues_found: [sdlc-enforcer, security-architect]
      
    message_templates:
      audit_report: "üìä AUDIT_REPORT: [SCOPE] | Findings: [COUNT] | Severity: [HIGH/MED/LOW] | Evidence: [LINKS]"
      compliance_gap: "‚ö†Ô∏è COMPLIANCE_GAP: [REGULATION] | Current State: [STATUS] | Required: [ACTIONS]"

  framework-validator:
    role: "defender"
    position: "structure-enforcer" 
    primary_function: "Validates framework structure and adherence"
    communication_style: "Precise, technical, standards-focused"
    
    receives_from: [sdlc-enforcer, all]
    passes_to:
      valid: [solution-architect, agile-coach]
      invalid: [sdlc-enforcer, documentation-architect]
      
    message_templates:
      structure_valid: "‚úÖ STRUCTURE_VALID: [COMPONENT] follows framework standards | Version: [X.Y.Z]"
      structure_invalid: "‚ùå STRUCTURE_INVALID: [COMPONENT] | Issues: [LIST] | Standards: [REFERENCE]"

  security-architect:
    role: "defender"
    position: "security-specialist"
    primary_function: "Ensures security throughout all processes"
    communication_style: "Risk-focused, proactive, defensive"
    
    receives_from: [solution-architect, ai-solution-architect, python-expert]
    passes_to:
      secure: [compliance-auditor, sre-specialist]
      threats: [sre-specialist, delivery-manager]
      
    message_templates:
      security_review: "üîí SECURITY_REVIEW: [COMPONENT] | Risk Level: [HIGH/MED/LOW] | Mitigations: [LIST]"
      threat_alert: "üö® THREAT_ALERT: [VULNERABILITY] | Impact: [SCOPE] | Urgency: [TIMELINE]"

  # MIDFIELDERS - The Engine Room
  solution-architect:
    role: "midfielder"
    position: "team-captain"
    primary_function: "Central coordination of all technical decisions"
    communication_style: "Strategic, coordinating, technically authoritative"
    
    receives_from: [all]  # Captain receives requests from everyone
    passes_to:
      implementation: [ai-solution-architect, python-expert, devops-specialist]
      validation: [critical-goal-reviewer, test-manager]
      coordination: [agile-coach, delivery-manager]
      
    message_templates:
      design_decision: "üèóÔ∏è DESIGN_DECISION: [COMPONENT] | Architecture: [PATTERN] | Rationale: [WHY]"
      work_distribution: "üì§ WORK_DISTRIBUTION: [TASK] ‚Üí [AGENT] | Context: [BRIEF] | Deadline: [DATE]"
      technical_review: "üîç TECH_REVIEW: [SOLUTION] | Assessment: [RATING] | Recommendations: [LIST]"

  agile-coach:
    role: "midfielder"
    position: "process-coordinator"
    primary_function: "Facilitates optimal team communication and processes"
    communication_style: "Facilitative, encouraging, process-improving"
    
    receives_from: [all]
    passes_to: [delivery-manager, retrospective-miner, project-plan-tracker]
    
    message_templates:
      process_guidance: "üéØ PROCESS_GUIDANCE: [SITUATION] | Best Practice: [APPROACH] | Benefits: [WHY]"
      coordination_request: "ü§ù COORDINATION_REQUEST: [AGENTS] needed for [TASK] | Timeline: [SCHEDULE]"
      retrospective_insight: "üí° RETROSPECTIVE_INSIGHT: [OBSERVATION] | Improvement: [SUGGESTION]"

  delivery-manager:
    role: "midfielder"
    position: "delivery-coordinator"
    primary_function: "Orchestrates delivery timelines and dependencies"
    communication_style: "Results-focused, timeline-aware, dependency-tracking"
    
    receives_from: [all]
    passes_to: [agile-coach, project-plan-tracker, critical-goal-reviewer]
    
    message_templates:
      delivery_status: "üìä DELIVERY_STATUS: [MILESTONE] | Progress: [X%] | Timeline: [ON-TRACK/DELAYED] | Blockers: [LIST]"
      dependency_alert: "‚ö†Ô∏è DEPENDENCY_ALERT: [TASK] depends on [BLOCKER] | Impact: [TIMELINE] | Action: [NEEDED]"

  # PLAYMAKERS - Creative Forces  
  ai-solution-architect:
    role: "playmaker"
    position: "ai-specialist"
    primary_function: "Architects intelligent systems and AI agent interactions"
    communication_style: "Innovation-focused, AI-native, forward-thinking"
    
    receives_from: [solution-architect, prompt-engineer, langchain-architect]
    passes_to: [mcp-server-architect, ai-test-engineer, python-expert]
    
    message_templates:
      ai_design: "üß† AI_DESIGN: [SYSTEM] | Intelligence Pattern: [APPROACH] | Agent Interaction: [MODEL]"
      optimization_recommendation: "‚ö° AI_OPTIMIZATION: [COMPONENT] | Current: [STATE] | Optimized: [APPROACH]"

  prompt-engineer:
    role: "playmaker"
    position: "communication-optimizer"
    primary_function: "Optimizes agent communication and prompt effectiveness"
    communication_style: "Precision-focused, communication-expert, optimization-driven"
    
    receives_from: [all]  # Studies all interactions
    passes_to: [ai-solution-architect, langchain-architect]
    
    message_templates:
      communication_optimization: "üéØ COMM_OPTIMIZATION: [PATTERN] | Efficiency Gain: [%] | New Pattern: [APPROACH]"
      prompt_refinement: "‚ú® PROMPT_REFINEMENT: [AGENT] | Old Pattern: [BEFORE] | Optimized: [AFTER]"

  mcp-server-architect:
    role: "playmaker"
    position: "infrastructure-designer"
    primary_function: "Builds infrastructure for agent communication"
    communication_style: "Technical, infrastructure-focused, reliability-oriented"
    
    receives_from: [ai-solution-architect, langchain-architect]
    passes_to: [devops-specialist, sre-specialist, integration-orchestrator]
    
    message_templates:
      infrastructure_design: "üèóÔ∏è MCP_INFRASTRUCTURE: [SYSTEM] | Components: [LIST] | Communication: [PROTOCOL]"
      deployment_ready: "üöÄ DEPLOYMENT_READY: [SERVICE] | Health: [STATUS] | Monitoring: [ENABLED]"

  # STRIKERS - Results Deliverers
  python-expert:
    role: "striker"
    position: "implementation-specialist" 
    primary_function: "Executes technical implementations with precision"
    communication_style: "Implementation-focused, quality-oriented, delivery-driven"
    
    receives_from: [solution-architect, ai-solution-architect]
    passes_to: [ai-test-engineer, performance-engineer]
    
    message_templates:
      implementation_complete: "‚úÖ IMPLEMENTATION_COMPLETE: [FEATURE] | Code Quality: [SCORE] | Tests: [COVERAGE%]"
      technical_challenge: "üîß TECHNICAL_CHALLENGE: [ISSUE] | Approach: [SOLUTION] | Review Needed: [AREAS]"

  performance-engineer:
    role: "striker"
    position: "optimization-specialist"
    primary_function: "Ensures system performance and efficiency"
    communication_style: "Metrics-driven, performance-focused, optimization-oriented"
    
    receives_from: [python-expert, sre-specialist, devops-specialist]
    passes_to: [sre-specialist, devops-specialist, solution-architect]
    
    message_templates:
      performance_report: "üìà PERFORMANCE_REPORT: [SYSTEM] | Metrics: [DATA] | Bottlenecks: [LIST] | Recommendations: [ACTIONS]"
      optimization_complete: "‚ö° OPTIMIZATION_COMPLETE: [COMPONENT] | Improvement: [X%] | Impact: [DESCRIPTION]"

  devops-specialist:
    role: "striker"
    position: "deployment-specialist"
    primary_function: "Deploys and scales infrastructure"
    communication_style: "Operations-focused, scalability-oriented, reliability-driven"
    
    receives_from: [solution-architect, mcp-server-architect, performance-engineer]
    passes_to: [sre-specialist, delivery-manager]
    
    message_templates:
      deployment_complete: "üöÄ DEPLOYMENT_COMPLETE: [SERVICE] | Environment: [STAGE] | Health: [STATUS] | Monitoring: [ACTIVE]"
      scaling_recommendation: "üìä SCALING_RECOMMENDATION: [SERVICE] | Current Load: [METRICS] | Suggested: [CHANGES]"

# Workflow Patterns
workflows:
  
  feature_development:
    name: "Feature Development Flow"
    trigger: "New feature request"
    sequence:
      - agent: solution-architect
        action: "Create technical design"
        outputs: ["architecture_document", "implementation_plan"]
        
      - agent: ai-solution-architect  
        action: "Design AI-specific components"
        inputs: ["architecture_document"]
        outputs: ["ai_architecture", "agent_interaction_design"]
        
      - agent: security-architect
        action: "Security review"
        inputs: ["architecture_document", "ai_architecture"]
        outputs: ["security_assessment", "risk_mitigations"]
        
      - agent: python-expert
        action: "Implementation"
        inputs: ["implementation_plan", "ai_architecture"]
        outputs: ["working_code", "unit_tests"]
        
      - agent: ai-test-engineer
        action: "AI-specific testing"
        inputs: ["working_code", "agent_interaction_design"]
        outputs: ["test_results", "quality_report"]
        
      - agent: critical-goal-reviewer
        action: "Final validation"
        inputs: ["working_code", "test_results", "original_requirements"]
        outputs: ["approval", "deployment_authorization"]

  issue_resolution:
    name: "Issue Resolution Flow"
    trigger: "Problem detected"
    sequence:
      - agent: sre-specialist
        action: "Triage and assess impact"
        outputs: ["impact_assessment", "urgency_classification"]
        
      - agent: solution-architect
        action: "Determine resolution approach"
        inputs: ["impact_assessment"]
        outputs: ["resolution_strategy", "resource_requirements"]
        
      - agent: python-expert
        action: "Implement fix" 
        inputs: ["resolution_strategy"]
        outputs: ["fix_implementation", "regression_tests"]
        
      - agent: ai-test-engineer
        action: "Validate fix"
        inputs: ["fix_implementation", "regression_tests"]
        outputs: ["validation_results"]
        
      - agent: retrospective-miner
        action: "Extract lessons learned"
        inputs: ["issue_details", "resolution_approach", "validation_results"]
        outputs: ["retrospective_insights", "process_improvements"]

  compliance_audit:
    name: "Compliance Audit Flow"
    trigger: "Scheduled audit or compliance check"
    sequence:
      - agent: compliance-auditor
        action: "Conduct compliance assessment"
        outputs: ["audit_report", "compliance_gaps"]
        
      - agent: sdlc-enforcer
        action: "Validate against framework requirements"
        inputs: ["audit_report"]
        outputs: ["framework_compliance", "enforcement_actions"]
        
      - agent: documentation-architect
        action: "Update compliance documentation"
        inputs: ["audit_report", "compliance_gaps"]
        outputs: ["updated_documentation", "compliance_evidence"]
        
      - agent: delivery-manager
        action: "Plan remediation activities"
        inputs: ["compliance_gaps", "enforcement_actions"]
        outputs: ["remediation_plan", "timeline"]

# Communication Protocols
protocols:
  
  message_structure:
    standard_format: "[SENDER] ‚Üí [RECEIVER]: [MESSAGE_TYPE] | [CONTENT] | Priority: [HIGH/MED/LOW] | Context: [BRIEF]"
    
  priority_handling:
    HIGH: 
      response_time: "< 2 hours"
      escalation: "Automatic if no response"
      
    MED:
      response_time: "< 24 hours" 
      escalation: "Manual after 48 hours"
      
    LOW:
      response_time: "< 3 days"
      escalation: "Weekly review"
      
  escalation_chains:
    technical_issues: [solution-architect, ai-solution-architect, critical-goal-reviewer]
    process_violations: [sdlc-enforcer, compliance-auditor, delivery-manager]
    quality_concerns: [test-manager, critical-goal-reviewer, sdlc-enforcer]
    performance_issues: [performance-engineer, sre-specialist, solution-architect]
    
  handoff_requirements:
    mandatory_fields: [context, completed_work, next_steps, dependencies, risks]
    validation: "Receiving agent must acknowledge understanding"
    
# Success Metrics
metrics:
  communication_efficiency:
    - "Average response time by priority"
    - "Message clarity score (responses without clarification requests)"
    - "Handoff success rate"
    
  coordination_quality:
    - "Number of miscommunicated requirements"
    - "Workflow completion time vs. estimate"
    - "Inter-agent dependency resolution time"
    
  team_chemistry:
    - "Proactive support instances"
    - "Cross-agent collaboration frequency"
    - "Knowledge sharing rate"
    
  delivery_velocity:
    - "Concept to production time"
    - "Quality gate pass rate"
    - "Rework frequency"
    
  learning_rate:
    - "Process improvement implementation time"
    - "Repeated issue frequency decrease"
    - "Communication pattern optimization rate"